{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleClick","console","log","_this$state","length","props","add","setState","alert","handleCheckbox","e","target","handleTextChange","value","handleDate","maxDate","this","react_default","a","createElement","Fragment","className","type","placeholder","onChange","htmlFor","min","max","id","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","activeTasks","map","components_Task","key","doneTasks","fontSize","App","counter","deleteTask","Object","toConsumableArray","changeTaskStatus","Array","from","forEach","getTime","addTask","prevState","concat","src_components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAwEeA,0NArEXC,SAAU,IAAIC,MAAOC,cAAcC,MAAM,EAAE,MAC3CC,MAAQ,CACJC,KAAK,GACLC,SAAS,EACTC,KAAMC,EAAKR,WAGfS,YAAc,WAClBC,QAAQC,IAAI,WADY,IAAAC,EAEIJ,EAAKJ,MAA1BC,EAFiBO,EAEjBP,KAAKE,EAFYK,EAEZL,KAAKD,EAFOM,EAEPN,QACdD,EAAKQ,OAAS,EACLL,EAAKM,MAAMC,IAAIV,EAAKE,EAAKD,IAEjCE,EAAKQ,SAAS,CACVX,KAAK,GACLC,SAAS,EACTC,KAAKC,EAAKR,UAKViB,MAAM,0BAGVC,eAAiB,SAACC,GACdX,EAAKQ,SAAS,CAClBV,QAASa,EAAEC,OAAOd,aAGlBe,iBAAmB,SAACF,GAChBX,EAAKQ,SAAS,CACdX,KAAKc,EAAEC,OAAOE,WAItBC,WAAa,SAACJ,GACVX,EAAKQ,SAAS,CACVT,KAAKY,EAAEC,OAAOE,iFAItB,IAAIE,EAAoC,EAA1BC,KAAKzB,QAAQG,MAAM,EAAE,GAAS,EAGpC,OAFRqB,GAAoB,SAGRE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAAA,OAAKE,UAAW,QAE5BJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAMC,YAAY,WAAWV,MAAOG,KAAKrB,MAAMC,KAAK4B,SAAUR,KAAKJ,mBAC/EK,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,QAAf,SAEAR,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOT,MAAOG,KAAKrB,MAAMG,KAAM4B,IAAKV,KAAKzB,QAAQoC,IAAKZ,EAClES,SAAUR,KAAKF,aAEfG,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,aAAf,YAEAR,EAAAC,EAAAC,cAAA,SAAOG,KAAK,WAAWzB,QAASmB,KAAKrB,MAAME,QAAS+B,GAAG,YAAYJ,SAAUR,KAAKP,iBAElFQ,EAAAC,EAAAC,cAAA,UAAQU,QAASb,KAAKhB,aAAtB,QAGYiB,EAAAC,EAAAC,cAAA,mBAhEUW,cCmCPC,EAlCF,SAAC1B,GAEV,IAFoB2B,EAK+B3B,EAAM4B,KAAlDrC,EALaoC,EAKbpC,KAAKE,EALQkC,EAKRlC,KAAK8B,EALGI,EAKHJ,GAAGM,EALAF,EAKAE,OAAOC,EALPH,EAKOG,UAAUC,EALjBJ,EAKiBI,WAErC,GAAGF,EACH,OACIjB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACAF,EAAAC,EAAAC,cAAA,UAAQkB,MAAOF,EATL,CACVG,MAAM,OAQ6B,MAAO1C,EAA1C,KADA,WAEQqB,EAAAC,EAAAC,cAAA,YAAOrB,EAAP,KACRmB,EAAAC,EAAAC,cAAA,UAAQU,QAAU,kBAAMxB,EAAMkC,OAAOX,KAArC,QACAX,EAAAC,EAAAC,cAAA,UAAQU,QAAS,kBAAKxB,EAAMmC,OAAOZ,KAAnC,OAKC,IAAMa,EAAS,IAAIjD,KAAK4C,GAAYM,iBACpC,OACGzB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACAF,EAAAC,EAAAC,cAAA,cAASvB,EAAT,KADA,WAEQqB,EAAAC,EAAAC,cAAA,YAAOrB,EAAP,KACRmB,EAAAC,EAAAC,cAAA,WAHA,uBAIQF,EAAAC,EAAAC,cAAA,YAAOsB,GACfxB,EAAAC,EAAAC,cAAA,UAAQU,QAAS,kBAAKxB,EAAMmC,OAAOZ,KAAnC,QCOGe,EAlCE,SAACtC,GAClB,IAAM6B,EAAS7B,EAAMuC,MAAMC,OAAO,SAAAZ,GAAI,OAAIA,EAAKC,SACzCY,EAAOzC,EAAMuC,MAAMC,OAAO,SAAAZ,GAAI,OAAKA,EAAKC,SAIpCa,EAAcb,EAAOc,IAAI,SAAAf,GAAI,OAAIhB,EAAAC,EAAAC,cAAC8B,EAAD,CAAMC,IAAKjB,EAAKL,GAAIK,KAAMA,EAAMO,OAAQnC,EAAMmC,OACrFD,OAAQlC,EAAMkC,WAERY,EACNL,EAAKE,IAAI,SAAAf,GAAI,OAAIhB,EAAAC,EAAAC,cAAC8B,EAAD,CAAMC,IAAKjB,EAAKL,GAAIK,KAAMA,EAAMO,OAAQnC,EAAMmC,OAAOD,OAAQlC,EAAMkC,WAIpF,OACItB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAAA,OAAKE,UAAW,UACfJ,EAAAC,EAAAC,cAAA,6BACG4B,EAAY3C,OAAS,EAAI2C,EAAc9B,EAAAC,EAAAC,cAAA,0CAI3CF,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,OAAKE,UAAW,aAChBJ,EAAAC,EAAAC,cAAA,yBAAgBF,EAAAC,EAAAC,cAAA,cAAM2B,EAAK1C,OAAX,MADhB,IAC+C0C,EAAK1C,OAAS,GAAMa,EAAAC,EAAAC,cAAA,QAAMkB,MAAO,CAACe,SAAU,SAAxB,gCAClED,EAAUzD,MAAM,EAAE,MC8EZ2D,6MApGbC,QAAU,IAEV3D,MAAQ,CACNiD,MAAO,CACP,CAAChB,GAAG,EACJhC,KAAM,sBACNE,KAAM,aACNqC,WAAW,EACXD,QAAQ,EACRE,WAAW,MAEb,CAACR,GAAG,EACFhC,KAAM,sBACNE,KAAM,aACNqC,WAAW,EACXD,QAAQ,EACRE,WAAW,MAEb,CAACR,GAAG,EACFhC,KAAM,eACNE,KAAM,aACNqC,WAAW,EACXD,QAAQ,EACRE,WAAW,MAEb,CAACR,GAAG,EACFhC,KAAM,iBACNE,KAAM,aACNqC,WAAW,EACXD,QAAQ,EACRE,WAAW,UAIfmB,WAAa,SAAC3B,GACZ3B,QAAQC,IAAI,eAAkB0B,GAUhC,IAAIgB,EAAKY,OAAAC,EAAA,EAAAD,CAAOzD,EAAKJ,MAAMiD,OAC3BA,EAAQA,EAAMC,OAAO,SAAAZ,GAAI,OAAIA,EAAKL,KAAOA,IACzC7B,EAAKQ,SAAS,CACZqC,aAMFc,iBAAmB,SAAC9B,GAClB3B,QAAQC,IAAI,eAAiB0B,GAC7B,IAAMgB,EAAQe,MAAMC,KAAK7D,EAAKJ,MAAMiD,OACpCA,EAAMiB,QAAQ,SAAA5B,GACTA,EAAKL,KAAMA,IACZK,EAAKC,QAAO,EACZD,EAAKG,YAAa,IAAI5C,MAAOsE,aAGjC/D,EAAKQ,SAAS,CACZqC,aAGJmB,QAAU,SAACnE,EAAKE,EAAKqC,GAEnB,IAAMF,EAAO,CACXL,GAAI7B,EAAKuD,QACT1D,KAAMA,EACNE,KAAMA,EACNqC,UAAWA,EACXD,QAAQ,EACRE,WAAW,MASb,OAPArC,EAAKuD,UACLrD,QAAQC,IAAI+B,EAAKlC,EAAKuD,SAEtBvD,EAAKQ,SAAS,SAAAyD,GAAS,MAAK,CAC1BpB,MAAK,GAAAqB,OAAAT,OAAAC,EAAA,EAAAD,CAAMQ,EAAUpB,OAAhB,CAAuBX,QAGvB,2EAML,OACEhB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAC+C,EAAD,CAAS5D,IAAKU,KAAK+C,UACnB9C,EAAAC,EAAAC,cAACgD,EAAD,CAAUvB,MAAO5B,KAAKrB,MAAMiD,MAAOJ,OAAQxB,KAAKuC,WAAYhB,OAAQvB,KAAK0C,2BAhG/D5B,aCOEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7b0bf761.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './AddTask.css'\nclass AddTask extends Component {\n    minDate = new Date().toISOString().slice(0,10);\n    state = {  \n        text:'',\n        checked: false,\n        date: this.minDate\n    }\n\n    handleClick = () => {\nconsole.log('working')\nconst {text,date,checked} = this.state\nif(text.length > 2) {\nconst add = this.props.add(text,date,checked);\nif (add) {\n    this.setState({\n        text:'',\n        checked: false,\n        date:this.minDate\n    })\n}\n    }\n    else {\n        alert('minimum three words')\n    }}\n\n    handleCheckbox = (e) => {\n        this.setState({\n    checked: e.target.checked\n        })\n    }\n    handleTextChange = (e) => {\n        this.setState({\n        text:e.target.value\n        })\n    }\n\nhandleDate = (e) => {\n    this.setState({\n        date:e.target.value\n    })\n}\n    render() { \nlet maxDate = this.minDate.slice(0,4) * 1 + 1;\nmaxDate = maxDate + \"-12-31\";\n\n        return ( \n            <>\n            <div className =\"form\">\n\n<input type=\"text\"placeholder=\"add task\" value={this.state.text}onChange={this.handleTextChange}/>\n<br/>\n\n<label htmlFor=\"date\">Until</label>\n\n<input type=\"date\" value={this.state.date} min={this.minDate}max={maxDate}\nonChange={this.handleDate}/>\n\n<label htmlFor=\"important\">Priority</label>\n\n<input type=\"checkbox\" checked={this.state.checked} id=\"important\" onChange={this.handleCheckbox}/>\n\n<button onClick={this.handleClick}>Add</button>\n\n   </div>\n            <hr/>\n            </>\n         );\n    }\n}\n \nexport default AddTask;","import React from 'react';\n\n\nconst Task = (props) => {\n\n    const style = {\n        color:'red',\n    }\n    const {text,date,id,active,important,finishDate} = props.task;\n\n    if(active) {\n    return ( \n        <div>\n        <p>    \n        <strong style={important ? style : null}>{text} </strong> \n        - until <span>{date} </span>\n        <button onClick= {() => props.change(id)}>Done</button>\n        <button onClick={() =>props.delete(id)}>X</button>\n        </p>\n        </div>\n      \n     );} else{\n         const finish = new Date(finishDate).toLocaleString()\n         return (\n            <div>\n            <p>    \n            <strong>{text} </strong> \n            - until <span>{date} </span>\n            <br/>\n- confirmation date <span>{finish}</span>\n            <button onClick={() =>props.delete(id)}>X</button>\n            </p>\n            </div>\n         )\n     }\n}\n \nexport default Task;","import React from 'react';\nimport Task from './Task'\n\nconst TaskList = (props) => {\nconst active = props.tasks.filter(task => task.active);\nconst done = props.tasks.filter(task => !task.active);\n\n\n\n    const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete}\n    change={props.change}/>)\n\n    const doneTasks = \n    done.map(task => <Task key={task.id} task={task} delete={props.delete}change={props.change}/>)\n\n\n\n    return ( \n        <>\n        <div className =\"active\">\n         <h1>Task List to Do</h1> \n           {activeTasks.length > 0 ? activeTasks : <p>Nothing to Do. Do Something!</p> }\n       \n        </div>\n\n        <hr/>\n\n        <div className =\"nonactive\">\n        <h3>Tasks Done  <em>({done.length})</em></h3> {done.length > 3 &&  <span style={{fontSize: \"50px\"}} > These are just last 3 tasks</span>}\n        {doneTasks.slice(0,3)}\n          \n       </div>\n</>\n\n     );\n}\n \nexport default TaskList;","import React, { Component } from 'react';\nimport './App.css';\nimport AddTask from './AddTask'\nimport TaskList from './TaskList'\n\nclass App extends Component {\n\n  counter = 4;\n\n  state = {\n    tasks: [\n    {id:0,\n    text: 'Buy some vegtabales',\n    date: '2019-02-20',\n    important: false,\n    active: true,\n    finishDate:null\n  },\n  {id:1,\n    text: 'Upload next project',\n    date: '2030-02-20',\n    important: true,\n    active: true,\n    finishDate:null\n  },\n  {id:2,\n    text: 'Call parents',\n    date: '2019-02-20',\n    important: true,\n    active: true,\n    finishDate:null\n  },\n  {id:3,\n    text: 'Buy bike tires',\n    date: '2019-02-20',\n    important: true,\n    active: true,\n    finishDate:null\n  },\n    ]\n  }\ndeleteTask = (id) => {\n  console.log(\"delete works\"  + id);\n\n  // Metoda 1 ze find idexem i splicem\n\n  // const tasks = [...this.state.tasks];\n  // const index = tasks.findIndex(task => task.id ===id)\n  // tasks.splice(index,1)\n  // this.setState({\n  //   tasks\n  // })\nlet tasks = [...this.state.tasks];\ntasks = tasks.filter(task => task.id !== id)\nthis.setState({\n  tasks\n})\n\n\n}\n\nchangeTaskStatus = (id) => {\n  console.log(\"change works\" + id);\n  const tasks = Array.from(this.state.tasks);\n  tasks.forEach(task => {\n    if(task.id ===id){\n      task.active=false;\n      task.finishDate = new Date().getTime()\n    }\n  })\n  this.setState({\n    tasks\n  })\n}\naddTask = (text,date,important) => {\n  // console.log('dodany tekst')\n  const task = { \n    id: this.counter,\n    text: text,\n    date: date,\n    important: important,\n    active: true,\n    finishDate:null\n  }\n  this.counter++\n  console.log(task,this.counter);\n\n  this.setState(prevState => ({\n    tasks: [...prevState.tasks, task]\n  }))\n\n  return true\n  \n}\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>TO DO LIST</h1>\n        <AddTask add={this.addTask}/>\n        <TaskList tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}